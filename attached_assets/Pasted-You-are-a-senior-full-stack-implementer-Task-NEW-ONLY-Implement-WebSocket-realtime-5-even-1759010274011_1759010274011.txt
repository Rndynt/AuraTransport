You are a senior full-stack implementer. **Task (NEW ONLY):** Implement **WebSocket realtime (5 events)**, make **booking deterministic**, fix **seat availability / multi-seat**, and show **seat availability on CSO ‚ÄúAvailable Trips‚Äù**. Also create a persistent **prompt log** under `replit_prompts/`.  
**Do NOT work on any old tasks (Trip Bases CRUD, Seeder, etc.). Only the items below.**  
Stack: Node 20 + Express 5 + TS, React + TS (Vite), Drizzle + PostgreSQL. Keep code modular by feature.

================================================================================
A) REALTIME WEBSOCKET ‚Äî implement server + client wiring (REQUIRED)
================================================================================
Use Socket.IO or `ws`. Add a server module (e.g. `server/realtime/ws.ts`) and export helpers to emit events. Use **rooms**:
- `trip:<tripId>` ‚Äî clients viewing a specific trip (seatmap).
- `base:<baseId>` ‚Äî clients listing where that base appears virtually.
- (optional) `cso:<outletId>:<serviceDate>` ‚Äî clients listing trips for a given outlet/date.

**Implement and emit ALL 5 events:**
1. `TRIP_STATUS_CHANGED` `{ tripId, status }`
2. `TRIP_CANCELED` `{ tripId }`  // alias when status becomes 'canceled'
3. `HOLDS_RELEASED` `{ tripId, seatNos?: string[] }`
4. `TRIP_MATERIALIZED` `{ baseId, serviceDate, tripId }`
5. `INVENTORY_UPDATED` `{ tripId, seatNo: string, legIndexes?: number[] }`

**Emit points (server):**
- After `POST /api/cso/materialize-trip` success ‚Üí `TRIP_MATERIALIZED` (to `base:<baseId>` and any relevant `cso:*` room).
- After `POST /api/trips/:id/close` ‚Üí set status to `closed`, release holds ‚Üí emit `TRIP_STATUS_CHANGED` (and optionally `HOLDS_RELEASED` with seatNos).
- On seat hold create/release & booking/issue/refund ‚Üí emit `INVENTORY_UPDATED` (to `trip:<tripId>` and optionally `cso:*`).

**Client subscriptions (React):**
- CSO list page:
  - `TRIP_MATERIALIZED` ‚Üí flip matching Virtual card ‚Üí Real (or refetch list).
  - `TRIP_STATUS_CHANGED` ‚Üí update badge to Closed/Canceled and disable actions.
  - `INVENTORY_UPDATED` (optional) ‚Üí update seat counters on cards.
- Seatmap page:
  - `TRIP_STATUS_CHANGED ('closed')` ‚Üí show red banner ‚ÄúTrip closed by supervisor‚Äù, disable seat select/Book/Issue.
  - `INVENTORY_UPDATED` ‚Üí update seat UI live.
  - `HOLDS_RELEASED` ‚Üí clear hold indicators.

**Fallback:** If WS disconnected, use polling (Seatmap: 10‚Äì15s; CSO list: 30‚Äì60s).

================================================================================
B) BOOKING ‚Äî deterministik & idempotent (REQUIRED)
================================================================================
Eliminate heuristics; make seat selection/hold/issue **deterministic** and **race-safe**.

Rules/changes:
1) **Deterministic seat order** when auto-picking: sort by `seat_no ASC` (stable).
2) **Correct leg range**: legs = `[originSeq, destinationSeq - 1]`; validate `originSeq < destinationSeq`.
3) **Atomic HOLD** (single transaction):
   - Lock rows in `seat_inventory` for `(tripId, seatNo, legIndexes[])` via `SELECT ... FOR UPDATE` (or SKIP LOCKED if used).
   - Ensure all rows are **unbooked** and **not held** (or held by same operator & not expired).
   - If OK ‚Üí set `holdRef` + write `seat_holds`. Else ‚Üí fail with conflict code.
4) **Atomic BOOK/ISSUE** (single transaction):
   - Re-validate & lock same rows; ensure they‚Äôre free or held by this operator.
   - Set `booked=true`, clear `holdRef`, write `bookings`/`passengers`/`payments`.
   - If affected rows mismatch expectations ‚Üí rollback ‚Üí conflict.
5) **Idempotency key** per booking attempt (header or body) to de-dup retries.
6) **Concurrency tests**: simulate 5 parallel attempts for same seat/legs ‚Üí exactly 1 success; others conflict.

Add DEBUG logs around hold/book paths for diagnosis.

================================================================================
C) SEAT AVAILABILITY ‚Äî multi-seat correctness + counts on CSO list (REQUIRED)
================================================================================
Fix any bug where availability doesn‚Äôt cover **all legs in range** or **multi-seat** behaves inconsistently.

**Multi-seat booking:**
- For N seats requested, compute the same leg range; **all-or-nothing** in one transaction.
- If any seat conflicts, abort and return a structured message listing conflicting seats (optional).

**Seat counts on CSO ‚ÄúAvailable Trips‚Äù:**
- **Real trips:** compute `availableFromOutlet` for selected outlet/date:
  - Determine `originSeq` = stopSequence of the outlet stop, `destSeq` = last alightable stopSequence for that trip.
  - A seat counts as available if it‚Äôs **free on ALL legs** in `[originSeq, destSeq-1]` and not currently held (or hold expired).
  - Implement efficiently (aggregate by seat across legs).
- **Virtual trips:** show **estimated capacity** from base‚Äôs `defaultLayoutId` seat count; label as ‚Äúest.‚Äù (e.g., ‚Äú12 est.‚Äù). After materialize, update to real counts via `TRIP_MATERIALIZED` or refetch.

UI: add a small badge/chip like **‚ÄúSeats: 7‚Äù** (real) or **‚ÄúSeats: 12 est.‚Äù** (virtual) on each Available Trip card.

================================================================================
D) PROJECT LOG ‚Äî `replit_prompts/` markdown checklist (REQUIRED)
================================================================================
Create folder at repo root: **`replit_prompts`**.  
Create a file: **`replit_prompts/prompt_[YYYYMMDD_HHmmss]_WIB.md`** (use Asia/Jakarta time).  
Content:
- Title: ‚ÄúRealtime WS + Deterministic Booking + Seat Availability ‚Äî [datetime WIB]‚Äù
- Scope: copy this prompt (shortened)
- **Checklist (‚úÖ/‚ùå/üîÅ)** for:
  - [ ] WebSocket events: TRIP_STATUS_CHANGED, TRIP_CANCELED, HOLDS_RELEASED, TRIP_MATERIALIZED, INVENTORY_UPDATED (server emit & FE subscribe)
  - [ ] Deterministic booking: hold & issue atomic, idempotency key, concurrency test
  - [ ] Multi-seat booking: all-or-nothing, conflict response
  - [ ] CSO list seat counts: real & virtual (est.)
  - [ ] Fallback polling wired when WS not connected
- Implementation notes: files touched, endpoints, socket rooms
- Manual test results: short outcomes (see QA below)
- Follow-ups/TODOs (if any)

================================================================================
QA / TESTS (execute & record results in the checklist file)
================================================================================
Backend (Vitest/Supertest):
- Booking concurrency (5 parallel same seat/legs) ‚Üí 1 success, others conflict.
- Multi-seat (e.g., 3 seats) ‚Üí all-or-nothing works; conflicts reported properly.
- Emit events on materialize, close, holds release, inventory update (spy or integration).

Frontend (RTL/Playwright/manual):
- CSO list:
  - Shows seat counts for real trips; ‚Äúest.‚Äù counts for virtual.
  - On `TRIP_MATERIALIZED`, a virtual card turns real (or list refetch); counts change accordingly.
  - On `TRIP_STATUS_CHANGED` to closed ‚Üí badge updates; actions disabled.
- Seatmap:
  - Receives `TRIP_STATUS_CHANGED ('closed')` ‚Üí locks UI, shows banner.
  - Receives `INVENTORY_UPDATED` ‚Üí seat state updates in near-real-time.
- Polling fallback behaves when WS is disconnected.

================================================================================
ACCEPTANCE CRITERIA
================================================================================
- All **5 WebSocket events** implemented end-to-end (server emits, FE listens/reacts).
- Booking flow is **deterministic**, **atomic**, **idempotent**, and **concurrency-safe** (tests prove it).
- **Multi-seat** booking enforced as **all-or-nothing** transaction.
- CSO ‚ÄúAvailable Trips‚Äù shows **seat counts** (real) and **est.** for virtual; updates on events.
- `replit_prompts/prompt_[YYYYMMDD_HHmmss]_WIB.md` exists with checklist & verification notes.

> IMPORTANT: Do **not** modify unrelated features or reintroduce old tasks (Trip Bases CRUD, Seeder, etc.). Focus ONLY on the four items above and the prompt log.