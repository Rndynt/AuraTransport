You are a senior full-stack implementer. Implement **Virtual Scheduling with Trip Bases** + **Closed status visibility** without introducing “services/exceptions”. Stack: Node 20 + Express 5 + TypeScript, React + TS (Vite), Drizzle + PostgreSQL. Keep code modular by feature. One-shot update; make it idempotent and race-safe.

===============================================================================
OBJECTIVE
===============================================================================
1) Add **trip_bases** (recurring “virtual” schedules). They do NOT create rows in `trips` until needed.
2) Update CSO “Available Trips” to show a **union** of:
   - **Real trips** (from `trips`) → `isVirtual=false`
   - **Virtual items** (computed from `trip_bases`) → `isVirtual=true`
   Deduplicate by date so that any real trip **overrides** its base (the virtual for that base/date is hidden).
3) Add **materialization flow** (idempotent):
   - When CSO selects a **virtual** item, create a real `trip` (with `base_id`) + `trip_stop_times` + `trip_legs` + `seat_inventory`.
   - Use a **unique key** to prevent duplicate trips when many CSOs click simultaneously.
4) **Closed status policy**:
   - Operational “close schedule” for a date should **materialize** a real `trip` with `status='closed'`, not delete/hide it.
   - CSO list must show closed trips as **visible but non-bookable** with a “Closed” badge.
   - Seatmap for closed trips is read-only; holds/payments are blocked.
   - (Future) Reschedule will be implemented later; for now just surface closed state.

===============================================================================
SCHEMA CHANGES (Drizzle)
===============================================================================
Create NEW table: `trip_bases` and extend `trips`.

A) trip_bases (NEW)
- id: uuid pk default gen_random_uuid()
- patternId: uuid NOT NULL → trip_patterns.id
- code: text UNIQUE NULL (optional label/key)
- name: text NOT NULL (UI label, e.g., “Jakarta–Bandung 10:00 Slot-1”)
- active: boolean NOT NULL DEFAULT true
- timezone: text NOT NULL DEFAULT 'Asia/Jakarta'
- // Days of operation (pick one approach; implement boolean columns for simplicity):
  mon: boolean NOT NULL DEFAULT true
  tue: boolean NOT NULL DEFAULT true
  wed: boolean NOT NULL DEFAULT true
  thu: boolean NOT NULL DEFAULT true
  fri: boolean NOT NULL DEFAULT true
  sat: boolean NOT NULL DEFAULT true
  sun: boolean NOT NULL DEFAULT true
- validFrom: date NULL
- validTo: date NULL
- defaultLayoutId: uuid NULL → layouts.id
- defaultVehicleId: uuid NULL → vehicles.id
- capacity: integer NULL
- channelFlags: jsonb NOT NULL DEFAULT '{"CSO":true,"WEB":false,"APP":false,"OTA":false}'
- // Default stop times, **local time strings** without date applied later on materialization:
  defaultStopTimes: jsonb NOT NULL
  // example:
  // [
  //   {"stopSequence":1,"departAt":"10:00:00"},
  //   {"stopSequence":2,"arriveAt":"10:55:00","departAt":"11:00:00"},
  //   {"stopSequence":3,"arriveAt":"12:00:00"}
  // ]
- createdAt: timestamptz default now()
- updatedAt: timestamptz default now()

Indexes:
- idx_trip_bases_active (active)
- idx_trip_bases_pattern (patternId)
- idx_trip_bases_valid (validFrom, validTo)

B) trips (ALTER)
- Add column `baseId: uuid NULL REFERENCES trip_bases(id)`
- (Optional metadata for labeling/sorting) `originDepartHHMM: char(5) NULL` // “HH:MM”, from defaultStopTimes seq=1
- Add **partial unique index** to enforce one instance per base per day:
  - `CREATE UNIQUE INDEX uniq_trip_base_per_day ON trips(base_id, service_date) WHERE base_id IS NOT NULL;`
  // Because we decided **1 trip_base = 1 departure time**; if later you need multiple times in one base, add originDepartHHMM to the key.

No other schema changes required.

===============================================================================
BACKEND — DOMAIN LOGIC
===============================================================================
Definitions
- A base is **eligible** on a given serviceDate D if:
  active = true AND (validFrom IS NULL OR validFrom <= D) AND (validTo IS NULL OR D <= validTo) AND (dayOfWeek[D] = true).

A) Helper: computeDefaultTimestamps(base, serviceDate)
- Convert `defaultStopTimes` local “HH:MM:SS” to timestamptz using base.timezone + serviceDate.
- First stop: require departAt (arriveAt optional/null)
- Intermediate: if either arriveAt/departAt provided, both must be non-null.
- Last stop: require arriveAt (departAt optional/null).
- Validate monotonicity; return detailed errors if invalid.

B) ensureMaterializedTrip(baseId, serviceDate) → tripId (IDEMPOTENT, RACE-SAFE)
Steps:
1) Load base; validate eligibility for serviceDate (else 400 code: 'base-not-eligible').
2) Try select existing trip by (base_id, service_date). If found → return its id.
3) Begin transaction:
   - Insert `trips` with:
     patternId = base.patternId
     serviceDate
     vehicleId = base.defaultVehicleId (or NULL if not set)
     layoutId = base.defaultLayoutId (fallback to pattern.defaultLayoutId if present)
     capacity = base.capacity or layout capacity or vehicle capacity (prefer vehicle if provided)
     channelFlags = base.channelFlags
     status = 'scheduled'  // closed is only for operationally closed
     baseId = base.id
     originDepartHHMM = HH:MM from defaultStopTimes seq=1 (if available)
   - Compute timestamps via computeDefaultTimestamps(base, serviceDate) → upsert rows into `trip_stop_times` (stopId, stopSequence from pattern_stops, dwell from pattern; boarding/alighting inherited unless overrides are used).
   - Derive `trip_legs` from consecutive stop times (idempotent).
   - Precompute `seat_inventory` = seats × legs (idempotent).
   - Commit.
4) If INSERT trips fails due to unique (race), query the existing trip (base_id, service_date) and return its id.

C) Close schedule for a date (operational close)
- Admin/Supervisor action: **do NOT delete or cancel silently**.
- Materialize (if not exists) then set `trips.status='closed'`.
- Release/expire all holds for this trip (soft delete or mark expired + background cleanup).
- Publish realtime event (see Realtime section).
- Booking/Issue endpoints must reject with 409 `{ code: 'trip-closed' }`.

===============================================================================
BACKEND — API CHANGES
===============================================================================
1) GET /api/cso/available-trips?date=YYYY-MM-DD&outletId=<uuid>
Return a union of REAL + VIRTUAL, filtered by outlet’s stop being boardable (effective flags), ordered by departure at outlet.

Response item (extended):
{
  tripId?: string,                 // present if real
  baseId?: string,                 // present if virtual (and also present for real trip that came from a base; optional)
  isVirtual: boolean,              // true for base-derived items (no real trip yet)
  patternCode: string,
  patternPath: string,             // "A → C → B"
  vehicle: { code?: string; plate?: string } | null,
  capacity: number | null,
  status: "scheduled" | "canceled" | "closed" | "draft" | "unknown",
  departAtAtOutlet: string | null, // ISO if real; or computed from base if virtual
  finalArrivalAt: string | null,   // ISO if real; or computed from base if virtual
  stopCount: number
}

Construction rules:
- REAL: query `trips` of that date then compute `departAtAtOutlet` from `trip_stop_times` for outlet stop. `isVirtual=false`. Include `status` from trips.
- VIRTUAL: enumerate `trip_bases` eligible that day → compute times from `defaultStopTimes`. Exclude any base that already has a real trip for that date. `isVirtual=true`, `status='scheduled'` (virtual has intended scheduled state).
- If a trip is `closed`, it MUST still be returned with `status='closed'` and **must be non-bookable in FE**.

2) POST /api/cso/materialize-trip
Body: { baseId: string, serviceDate: string(YYYY-MM-DD) }
- Run ensureMaterializedTrip → return { tripId: string }
- If base not eligible → 400 { code: 'base-not-eligible' }

3) POST /api/trips/:id/close
- Operational close endpoint (Supervisor only).
- Actions: set status='closed'; release/expire holds; publish event.
- Returns { ok: true, tripId, status: 'closed' }

(Existing Trip APIs remain; derive-legs and precompute retain idempotency.)

===============================================================================
FRONTEND (React + TS)
===============================================================================
A) CSO Available Trips
- Adapt to the new response item:
  - Render badge:
    - `Virtual` for isVirtual=true
    - `Closed` (danger) for status='closed'
  - “Select” button behavior:
    - For `isVirtual=true`: call POST /materialize-trip, then navigate to the real trip’s seatmap.
    - For `status='closed'`: disable Select; show tooltip “Closed — not bookable”. (But keep it visible so CSO knows it exists; future: enable “Reschedule”.)
  - If multiple `trip_bases` share the same time (extra slots), show multiple virtual cards; each will materialize to a distinct trip.

B) Seatmap / Booking screens
- If trip status transitions to 'closed' while open:
  - Show a red banner “Trip closed by supervisor”.
  - Disable seat selection / Book / Issue; Release any current holds by the same operator.

C) Admin UI
- New menu: Masters → **Trip Bases**
  - CRUD for base (pattern, name, DOW toggles, valid range, default layout/vehicle, capacity, channel flags, default stop times).
  - Validate defaultStopTimes (monotonic; first departAt, last arriveAt, etc.)
- Supervisor action:
  - Trip detail: “Close Trip” button → POST /api/trips/:id/close.
  - Optionally, a “Close date for base” action that materializes the date if needed and closes it.

===============================================================================
REALTIME / CONSISTENCY
===============================================================================
- Use WebSocket or SSE.
Channels/events:
- `TRIP_MATERIALIZED` { baseId, serviceDate, tripId } → CSO lists can refetch or patch item (turn virtual → real).
- `TRIP_STATUS_CHANGED` { tripId, status } → if status='closed', seatmap locks and buttons disable; show banner.
- (Optional) `HOLDS_RELEASED` { tripId, seatNos? } for UI polish.

Fallback without WS/SSE:
- Poll trip detail every 10–15s while seatmap is open.
- Poll available trips list every 30–60s while CSO page is open.

===============================================================================
VALIDATIONS & RULES (UNCHANGED + NEW)
===============================================================================
- Stop order **immutable** for trips that already have bookings; time edits allowed.
- Pickup-only rules enforced in both REAL and VIRTUAL list building (origin must be boardable at outlet; destination alightable).
- Booking & Issue endpoints must reject when trip.status in {'closed','canceled'} with explicit error codes: 'trip-closed' or 'trip-canceled'.
- Materialize must be idempotent and race-safe (unique (base_id, service_date)).

===============================================================================
TESTS (Vitest + Supertest; FE RTL/Playwright)
===============================================================================
Backend
- trip_bases eligibility by DOW and date range.
- available-trips returns REAL + VIRTUAL; dedup hides virtual if real exists.
- materialize-trip creates exactly one trip per (base_id, date) under concurrent requests.
- close-trip sets status='closed', releases holds, rejects booking/issue thereafter.

Frontend
- CSO list shows Virtual and Closed badges appropriately.
- Selecting Virtual → materializes then navigates to real trip.
- Closed trips are visible but non-bookable; tooltips/banners appear.
- Seatmap auto-disables on TRIP_STATUS_CHANGED='closed' (WS) or after polling.

===============================================================================
DELIVERABLES
===============================================================================
- New `trip_bases` table + migrations; `trips` extended with `baseId` (+ index).
- Updated /available-trips to return union with `isVirtual` flag.
- New POST /materialize-trip and POST /trips/:id/close endpoints.
- FE updates for CSO list, seatmap lock on close, and Masters → Trip Bases CRUD.
- Realtime events or polling fallback implemented.
- Update `features_checklist.md` section “Virtual Scheduling (Trip Bases)” with items, verification notes, and commit hashes.

===============================================================================
NOTES
===============================================================================
- Keep current naming conventions (camelCase in TS, snake_case in DB if already used).
- Do not break existing data; backfill safe defaults for new columns.
- Keep all new logic behind feature-flag if necessary (optional).
