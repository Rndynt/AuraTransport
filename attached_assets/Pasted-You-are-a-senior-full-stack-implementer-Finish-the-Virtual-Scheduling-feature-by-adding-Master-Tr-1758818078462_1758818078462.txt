You are a senior full-stack implementer. Finish the Virtual Scheduling feature by adding **Master Trip Bases** (CRUD UI), seeds, and end-to-end verification. Also audit the codebase to ensure every item from the previous “Trip Bases + Virtual Scheduling + Closed status” prompt is actually implemented, and fix any gaps. Stack: Node 20 + Express 5 + TypeScript, React + TS (Vite), Drizzle + PostgreSQL. Keep code modular by feature.

================================================================
SCOPE
================================================================
1) Add a full **Master Trip Bases** module (backend + frontend CRUD).
2) Create/extend **seed data** so CSO can see virtual schedules immediately.
3) Verify and complete any missing work from the previous prompt:
   - Union `available-trips` (REAL + VIRTUAL) with `isVirtual` flag and dedup.
   - `materialize-trip` flow (idempotent, race-safe).
   - `close-trip` sets status to `closed`, releases holds, and blocks booking/issue.
   - CSO UI shows badges: Virtual / Closed, disables booking for Closed.
   - Optional realtime (WS/SSE) or polling fallback.
4) Produce a concise **verification report** and update `features_checklist.md`.

================================================================
DATA MODEL (confirm/migrate)
================================================================
- Ensure table `trip_bases` exists with fields:
  - `id (uuid pk)`, `patternId (fk trip_patterns)`, `code (text unique?)`, `name (text)`,
  - `active (bool)`, `timezone (text, default 'Asia/Jakarta')`,
  - days of week: `mon..sun (bool)`,
  - `validFrom (date)`, `validTo (date)`,
  - `defaultLayoutId (fk layouts)`, `defaultVehicleId (fk vehicles)`, `capacity (int)`,
  - `channelFlags (jsonb)` default `{"CSO":true,"WEB":false,"APP":false,"OTA":false}`,
  - `defaultStopTimes (jsonb)` with local time strings per stop sequence,
  - timestamps.
- Ensure `trips` has `baseId (uuid null references trip_bases)` and optional `originDepartHHMM (char(5))`.
- Ensure partial unique index: `unique (base_id, service_date) where base_id is not null`.
- Run migrations safely; backfill defaults.

================================================================
BACKEND
================================================================
A) Trip Bases CRUD API
- Endpoints:
  - `GET /api/trip-bases` (list with filters: active, patternId, date range overlap).
  - `GET /api/trip-bases/:id`
  - `POST /api/trip-bases` (validate `defaultStopTimes` monotonic; origin depart required; last arrive required).
  - `PUT /api/trip-bases/:id` (same validations).
  - `DELETE /api/trip-bases/:id` (block delete if linked trips exist in future; or allow with warning).
- Server-side validation for `defaultStopTimes` and DOW toggles.

B) Available Trips (union)
- Confirm/implement `GET /api/cso/available-trips?date=YYYY-MM-DD&outletId=<uuid>` returns:
  - REAL trips for that date (computed `departAtAtOutlet`, `finalArrivalAt`, `status`), `isVirtual=false`.
  - VIRTUAL items from eligible `trip_bases` (respect DOW/range/active and outlet boardable), `isVirtual=true`, with computed times from `defaultStopTimes`.
  - Dedup: hide VIRTUAL where a REAL trip exists for that `(baseId, date)`.
  - Include `patternPath`, `vehicle` (from base defaults if any), `capacity`, `stopCount`.
  - If REAL trip `status='closed'`, still return and mark `Closed`.

C) Materialize (idempotent)
- Confirm/implement `POST /api/cso/materialize-trip { baseId, serviceDate }`:
  - Validate base eligibility for date (DOW/range/active).
  - Try read existing `(base_id, service_date)`; if exists return it.
  - Else insert `trips` with `baseId`, `patternId`, defaults from base, status `scheduled`.
  - Build `trip_stop_times` from `defaultStopTimes` + date + tz; inherit pickup/drop from pattern.
  - Derive `trip_legs` and precompute `seat_inventory` (idempotent).
  - Handle unique violation race by re-selecting existing trip and returning it.

D) Close Trip (operational)
- Confirm/implement `POST /api/trips/:id/close` (SPV only):
  - Set `status='closed'`.
  - Release/expire holds for this trip.
  - Emit realtime event `TRIP_STATUS_CHANGED` or mark for polling.
  - Ensure booking/issue endpoints reject with `409` and `{ code: 'trip-closed' }`.

E) Realtime/Polling
- If WS/SSE is present, emit:
  - `TRIP_MATERIALIZED { baseId, serviceDate, tripId }` so lists can refresh.
  - `TRIP_STATUS_CHANGED { tripId, status }`.
- If not, implement polling:
  - Seatmap: 10–15s heartbeat of trip status/version.
  - CSO list: 30–60s polling when page open.

================================================================
FRONTEND
================================================================
A) Master Trip Bases module (new)
- Menu: `Masters → Trip Bases`.
- Pages:
  - List: table with columns [Name, Pattern, DOW badges (S–M–T–W–T–F–S), ValidFrom–ValidTo, Origin HH:MM, Active, Actions].
  - Create/Edit:
    - Fields: Pattern (select), Name, Code (optional), Active toggle, DOW toggles, ValidFrom/ValidTo, Default Layout/Vehicle (optional), Capacity (optional), Channel Flags, Default Stop Times editor.
    - Default Stop Times editor:
      - Rows derived from `pattern_stops` (sequence & stops).
      - Inputs per row: `arriveAt (HH:mm:ss)` and/or `departAt (HH:mm:ss)` with proper rules (origin requires depart; last requires arrive).
      - Inline validation and summary error list.
    - Save buttons in BaseDialog footer.
  - Delete with confirmation; block or warn if future trips exist.
- Use the **BaseDialog** component for forms (consistent header/description/footer, scrollable body, sticky footer).

B) CSO Available Trips
- Render cards/rows for each item:
  - Badge `Virtual` when `isVirtual=true`.
  - Badge `Closed` when `status='closed'` (button disabled with tooltip “Closed — not bookable”).
- Button logic:
  - `isVirtual=true` → on click call materialize, then navigate to trip’s seatmap.
  - `isVirtual=false` & `status='scheduled'` → open seatmap.
  - `isVirtual=false` & `status='closed'` → disabled.
- If multiple bases share the same time (extra slots), show multiple items distinctly (do not dedup by time).

C) Seatmap / Booking
- When trip status transitions to `closed` (WS event or polling):
  - Show banner “Trip closed by supervisor”.
  - Disable seat selection, Book, Issue; auto-release any current holds owned by this operator if safe.

================================================================
SEED DATA (make feature visible immediately)
================================================================
Create/extend seeder so the app shows virtual items on day-0:
- Stops: JKT (Jakarta), PWK (Purwakarta, pickup-only), BDG (Bandung).
- Outlets: Jakarta Outlet (linked to JKT), Purwakarta Outlet (linked to PWK).
- Layouts: `Standard 12-seat`, `Standard 8-seat`.
- Vehicles: `BUS-A` (12-seat), `BUS-B` (8-seat).
- Pattern: `AB_via_C` with pattern_stops ordered: JKT (board only), PWK (pickup-only), BDG (alight only).
- Trip Bases:
  - Base-1: `AB_via_C 10:00 Slot-1` (everyday; default layout 12-seat, vehicle BUS-A; defaultStopTimes for 10:00 / 10:55–11:00 / 12:00).
  - Base-2: `AB_via_C 10:00 Slot-2` (same time; layout 8-seat, vehicle BUS-B).
  - Base-3: `AB_via_C 13:00 Slot-1` (second departure).
- Price rule: scope `pattern` with base price per leg (IDR).
- Do not create real trips; rely on virtual list.

================================================================
QA / MANUAL TESTS
================================================================
1) CSO at Jakarta Outlet (today):
   - See 3 items: Virtual 10:00 (Slot-1), Virtual 10:00 (Slot-2), Virtual 13:00.
   - Each shows correct path and `departAtAtOutlet` (10:00 or 13:00).
2) Multi-CSO materialization:
   - Two CSOs click Virtual 10:00 Slot-1 simultaneously → only 1 trip created; both navigate to same `tripId`.
   - List refetch shows Slot-1 as REAL; Slot-2 still Virtual.
3) Extra slot:
   - Materialize Slot-2 → now two REAL trips at 10:00 (different baseId).
4) Close Trip:
   - SPV closes one trip → list shows it as Closed (visible but disabled).
   - Seatmap on that trip locks with banner; booking/issue returns `409 code=trip-closed`.
5) PWK outlet (pickup-only):
   - `departAtAtOutlet` shows 11:00 for 10:00 base (arrive/depart PWK: 10:55/11:00).
6) Dedup:
   - For a date with REAL trip from a base, the corresponding Virtual item is hidden.

================================================================
AUDIT & GAP-FIX
================================================================
- Compare current code with the previous prompt requirements:
  - If any endpoint/flag/validation is missing or differs, implement it now.
  - Specifically verify:
    - `isVirtual` in `/available-trips` JSON for virtual rows.
    - Dedup logic base vs real per date.
    - `materialize-trip` idempotency (unique base/day).
    - `close-trip` flow releases holds and blocks booking/issue.
    - CSO UI badges and button disabling.
    - BaseDialog usage for all new modals.
- Update `features_checklist.md`:
  - Section: “Virtual Scheduling (Trip Bases) — Master + Seeds”
  - Mark completed items, note verification steps and commit hashes.
  - List any TODOs with owner and ETA.

================================================================
ACCEPTANCE CRITERIA
================================================================
- Master Trip Bases exists with full CRUD, validations, and BaseDialog UX.
- Seeder populates pattern, two layouts, two vehicles, and 3 trip bases so CSO instantly sees virtual schedules.
- `/available-trips` returns union with `isVirtual`, dedup works, pickup-only respected.
- Materialization is idempotent/race-safe and leads to valid `trip_stop_times`, `trip_legs`, `seat_inventory`.
- Closing a trip sets `status='closed'`, unlocks holds, shows Closed in CSO (disabled), and booking/issue are rejected.
- Verification report added to `features_checklist.md`.
