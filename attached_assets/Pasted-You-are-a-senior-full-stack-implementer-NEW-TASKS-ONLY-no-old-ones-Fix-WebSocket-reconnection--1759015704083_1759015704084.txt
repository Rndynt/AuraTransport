You are a senior full-stack implementer. NEW TASKS ONLY (no old ones): Fix WebSocket reconnection & wiring, make seat counts show correctly on CSO list, and fix hold toggle behavior (second click should release; no ‚Äúheld by you‚Äù error). Also audit the previous prompt log in replit_prompts/ and append a new checklist file for this run. Stack: Node 20 + Express 5 + TS, React + TS (Vite), Drizzle + PostgreSQL. Keep code modular by feature.

================================================================================
A) WEBSOCKET ‚Äî fix reconnection loop & make events actually flow
================================================================================
Symptoms: client keeps reconnecting; no realtime updates when closing trips or holding seats.  
Root causes to check & fix:

1) Attach IO to the exact HTTP server that listens
   - Create httpServer = require('http').createServer(app) (or import from your server bootstrap).
   - Initialize Socket.IO with that same instance:
       // server/realtime/ws.ts
       export function initRealtime(httpServer: Server) {
         io = new SocketIOServer(httpServer, {
           path: '/socket.io',
           cors: { origin: [CLIENT_URL], credentials: true, methods: ['GET','POST'] }
         });
         // register connection handlers...
       }
   - Do not call app.listen(...). Always call httpServer.listen(...).
   - Ensure only one Socket.IO instance exists and is exported for emitters.

2) Client config matches server
   - Path is /socket.io on both ends.
   - URL scheme: https ‚Üí wss, http ‚Üí ws. In dev, allow localhost; in Replit, set correct origin in CORS.
   - Version compatibility: client/server Socket.IO versions must match major.

3) Rooms & subscriptions
   - On connection, client must .emit('join', { rooms: [...] }) and server should socket.join(room) for:
     ‚Ä¢ cso:<outletId>:<serviceDate>  
     ‚Ä¢ trip:<tripId> when seatmap opens  
     ‚Ä¢ base:<baseId> if you show virtual-to-real flips  
   - Log server joins: debug:ws join room=<room> sid=<socket.id>

4) Emit from business logic
   - After materialize ‚Üí TRIP_MATERIALIZED { baseId, serviceDate, tripId } to:
     ‚Ä¢ base:<baseId> and cso:<outletId>:<serviceDate> (derive outletIds from all boardable stops or track last query)
   - After close ‚Üí TRIP_STATUS_CHANGED { tripId, status:'closed' } and HOLDS_RELEASED { tripId, seatNos? } to:
     ‚Ä¢ trip:<tripId> and relevant cso:* rooms
   - On hold/book/release ‚Üí INVENTORY_UPDATED { tripId, seatNo, legIndexes? } to:
     ‚Ä¢ trip:<tripId> (and optionally list rooms to refresh counters)

5) Diagnose the loop
   - Open browser Network ‚Üí socket.io/?EIO=4...
     ‚Ä¢ If 400/403 ‚Üí CORS/origin/path mismatch ‚Üí fix CORS/path.  
     ‚Ä¢ If 502/503 ‚Üí wrong server bound or proxy ‚Üí bind to the listening server.  
   - Add temporary server logs on connection, disconnect, and handshake errors.

Acceptance:
- Open 2 devices; close a trip ‚Üí both show Closed instantly (no manual refresh).
- Hold a seat on device A ‚Üí device B seat changes color within ~1s.
- No endless reconnect in console; WS connected once and stable.

================================================================================
B) CSO LIST ‚Äî show correct seat counts for REAL trips (no ‚Äú?‚Äù)
================================================================================
Issue: Real trip cards show ‚ÄúSeats: ?‚Äù.

Fix:
1) Backend /api/cso/available-trips
   - For REAL trips, include numeric availableSeats:
     ‚Ä¢ Determine outlet‚Äôs originSeq and last alightable destSeq.  
     ‚Ä¢ A seat is available if not booked on any leg in [originSeq, destSeq-1] and not held (or hold expired).  
     ‚Ä¢ Compute efficiently (aggregate by seat across legs; e.g., count legs where booked=false AND (holdRef IS NULL OR expired); only seats with count == legsInRange are ‚Äúavailable‚Äù).
   - For VIRTUAL, include availableSeatsEst from base‚Äôs default layout seat count.
   - Response per item:
       {
         ...,
         isVirtual: boolean,
         status: 'scheduled'|'closed'|'canceled',
         availableSeats?: number,            // REAL only
         availableSeatsLabel: string         // e.g. "7" (REAL) or "12 est." (VIRTUAL)
       }

2) Frontend
   - If isVirtual: render label from availableSeatsLabel (‚ÄúN est.‚Äù).
   - Else: render numeric availableSeats. Never show ‚Äú?‚Äù; if undefined, show ‚Äú0‚Äù and surface a console warn to find any missing backend.

Acceptance: All REAL trip cards show a number (e.g., ‚ÄúSeats: 7‚Äù); VIRTUAL show ‚Äú12 est.‚Äù. After holds/bookings, counts update via WS INVENTORY_UPDATED or a light refetch.

================================================================================
C) HOLDS ‚Äî second click should release, not error ‚Äúheld by you‚Äù
================================================================================
Current behavior: clicking the same seat twice calls ‚Äúhold‚Äù twice ‚Üí server returns ‚Äúheld by you‚Äù.

Required behavior:
- Click #1 on a free seat ‚Üí HOLD it (create seat_holds, set holdRef in seat_inventory legs).
- Click #2 on the same seat (held by me) ‚Üí RELEASE it (clear holdRef on those legs, delete/expire hold).

Implementation details:
1) Backend API
   - POST /api/holds (hold seats):
     ‚Ä¢ If the exact seat+leg range is already held by the same operator and not expired:
       - Return 200 with the same holdRef (idempotent), do NOT throw error.
     ‚Ä¢ If held by another operator ‚Üí 409 seat-held-elsewhere.
   - DELETE /api/holds/:holdRef (release):
     ‚Ä¢ Release all legs for that holdRef, even if partially selected.

2) Frontend toggle logic
   - On seat click:
     ‚Ä¢ If seat is free ‚Üí call POST /api/holds.  
     ‚Ä¢ If seat is held by me (UI state or holdRef present) ‚Üí call DELETE /api/holds/:holdRef.  
     ‚Ä¢ If seat is held by others ‚Üí show toast ‚ÄúSeat is held by another operator‚Äù.  
   - After release/hold, update locally and/or wait for WS INVENTORY_UPDATED to reconcile.

3) WS emission
   - On hold create/release: emit INVENTORY_UPDATED { tripId, seatNo, legIndexes? } to trip:<tripId> so other clients update state and CSO cards update counts.
   - Optionally emit HOLDS_RELEASED with seatNos when a close/cancel releases many holds.

Acceptance: Clicking the same seat twice toggles Hold/Release without errors; other client reflects changes in near real-time.

================================================================================
D) AUDIT PREVIOUS PROMPT LOG + NEW CHECKLIST FILE
================================================================================
- Read the previous executed prompt(s) under replit_prompts/ and confirm what was implemented vs. promised.
- Create a new file in repo root folder replit_prompts:
  - replit_prompts/prompt_[YYYYMMDD_HHmmss]_WIB.md
  - Sections (brief):
    ‚Ä¢ Scope (this prompt summary)  
    ‚Ä¢ Checklist (‚úÖ/‚ùå/üîÅ):
        - [ ] WebSocket attached to correct HTTP server; no reconnect loop
        - [ ] Client joins rooms and receives events
        - [ ] Emits wired in materialize/close/hold/book/release
        - [ ] REAL seat counts returned by API and displayed
        - [ ] Seat click toggles (hold ‚Üí release) without ‚Äúheld by you‚Äù error
    ‚Ä¢ Implementation Notes (files touched, config for CORS/path, room names)
    ‚Ä¢ Manual Test Results (see QA below)
    ‚Ä¢ Follow-ups (if any)

================================================================================
E) QA / TESTS (run & record results in the checklist)
================================================================================
Manual / automated:
1) WS connectivity
   - Open two devices on CSO list (same outlet/date). No reconnect loops in console.
2) Close trip realtime
   - SPV closes a trip; both devices see Closed instantly; card actions disabled.
3) Seat hold realtime
   - Device A holds seat; Device B sees seat blocked within ~1s; counts on cards decrease by 1.
   - Device A clicks seat again (release); Device B sees seat free and counts increase.
4) No ‚Äú?‚Äù counts
   - Real trips show numeric ‚ÄúSeats: N‚Äù. Virtual show ‚ÄúN est.‚Äù
5) Conflict handling
   - Try to hold a seat held by another operator ‚Üí 409 toast with friendly message; UI stays consistent.

================================================================================
ACCEPTANCE CRITERIA
================================================================================
- WebSocket connects reliably (no infinite reconnect); events emitted & received:
  ‚Ä¢ TRIP_STATUS_CHANGED, TRIP_CANCELED (if used), HOLDS_RELEASED, TRIP_MATERIALIZED, INVENTORY_UPDATED.  
- CSO list shows correct seat counts for REAL trips and ‚Äúest.‚Äù for VIRTUAL; updates in realtime.  
- Seat click toggles hold ‚Üí release for same operator; no ‚Äúheld by you‚Äù error on second click.  
- replit_prompts/prompt_[YYYYMMDD_HHmmss]_WIB.md created with the checklist and test results.

IMPORTANT: Do not change unrelated features. Focus only on WS wiring, seat counts, hold toggle, and the checklist.