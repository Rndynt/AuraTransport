You are a senior full-stack implementer. This is a **bugfix & enhancements prompt** for the existing multi-stop ticketing MVP you built earlier (Node 20 + Express 5 + TypeScript, React + TS Vite, Drizzle + Postgres). The previous agent left features incomplete and introduced UI/logic defects. **Audit, fix, and extend** per items below. Update `features_checklist.md` as you complete each item under a new section **“Bugfix & Enhancements – Sprint 01”** with short notes, commit hash, and how you verified.

GLOBAL CONSTRAINTS (unchanged)
- Architecture stays modular by feature; no monolithic `storage.ts`.
- Invariant: once a trip has bookings, **stop order (`stop_sequence`) cannot change**; time edits are fine; reordering requires a new trip.

SEED & DATA (RE-RUN + VERIFY)
- **Seed MUST be corrected**: Stops = **Jakarta (outlet=true)**, **Purwakarta (outlet=false)**, **Bandung (outlet=true)**. Outlets exist **only** for Jakarta & Bandung. Pattern `AB_via_C` with ordered stops A(1)→C(2)→B(3). Trip today 10:00 WIB; stop times (A 10:00 depart, C 10:55/11:00, B 12:00); derive legs (A→C, C→B) and precompute seat inventory. Add a checklist entry “Seed corrected (outlets flipped)”.

------------------------------------------------------------
BUGS & FEATURES TO IMPLEMENT
------------------------------------------------------------

1) PAYMENT & ISSUE FLOW: errors during “payment + issue”
- Harden backend `POST /api/bookings` and payment processing:
  - Validate DTO with Zod; ensure totals > 0; ensure at least one passenger; ensure seat ownership (see 12/13).
  - On failure, return structured `{error, code, details}`; frontend must render toasts.
- On success: set booking `status='paid'`, enqueue `print_jobs`, return printable payload.
- Frontend: make “Issue” button disabled until: OD chosen, ≥1 seat held/owned by this operator, passenger forms valid, payment method chosen.

2) NEW FEATURE — **“Book” (Pending, no payment yet)**
- After passenger data is filled, add **Book** action that:
  - Creates a **pending booking** without payment (`status='pending'`).
  - Converts any short holds (see item 12) into a **long hold TTL = 20 minutes**.
  - Persist a `pending_expires_at` timestamp (server-side) based on configuration (default 20m; configurable in an admin setting).
- Add **Pending Bookings page** (route `/cso/pending`) listing the operator’s tenant + outlet pending items with countdown; actions:
  - **Continue to Pay/Issue** (opens the same booking to payment step),
  - **Release** (manual cancel → releases held seats, sets booking `status='canceled'`).
- Cron/worker or server sweep: auto-release any pending bookings after `pending_expires_at` (set `status='canceled'` + free seat_inventory), idempotent.

3) NAVIGATION DUPLICATES
- Remove duplicate “Back to passenger / back to seat / continue payment” buttons; keep a single clear primary/secondary set; add keyboard shortcuts (e.g., Alt+← back, Alt+→ next). Ensure consistent placement across breakpoints.

4) SEAT LABELS OVERFLOW
- Fix SeatMap layout: seat labels/classes must not overflow their tiles.
  - Use CSS grid with minmax and `overflow: hidden; text-overflow: ellipsis;`
  - Add legend inside the panel (available / held by me / held by others / booked) and ensure it wraps on small screens.

5) INVISIBLE SIDEBAR TOGGLE & CRUD ACTIONS
- Sidebar toggle button: ensure visible contrast (non-white icon on white bg; add focus ring).
- Master tables: show obvious action buttons (Edit, Delete) with icons and labels; ensure hover/focus styles. Add table action column with ARIA labels.

6) SIDEBAR CHECKBOX BUG
- In sidebar, clicking one Master menu item checks **all**. Fix state so only the active menu item highlights; no checkbox controls; just nav highlighting via route match.

7) MASTER TABS LAYOUT
- Fix nav tabs on masters: responsive, non-overlapping, scrollable on small screens. Use a11y `role="tablist"`/`role="tab"` semantics; ensure the selected tab is visible.

8) MASTER LAYOUT CREATION BROKEN
- Fix form: ensure controlled inputs, validation, and enable Create button when valid.
- Preview should render **immediately** from the form’s `rows/cols/seat_map` state; if invalid, show inline errors.
- Dialog width responsive (e.g., 640–800px); close/cancel buttons accessible.

9) PRICE RULE DATE TYPES
- Price rules form must use **Date pickers** for `valid_from` / `valid_to`. Ensure backend expects ISO dates; transform to timestamptz. Zod validation should reject stringy non-date values.

10) SCHEDULING UX (Depart/Arrive & Leg durations)
- Add a **Trip Stop Times editor** within Trips:
  - Allow setting **depart_at** at first stop; then when user edits duration or arrival at next stop, compute dwell and leg duration.
  - Show computed **leg durations** per consecutive stop pair; when saving, auto (re)derive `trip_legs`.
  - Provide “Copy from pattern default” helper; button **Derive legs** and **Precompute seat inventory** visible and safe to re-run (idempotent).
  - Enforce the invariant: if the trip already has bookings, **disallow reorder**; only times editable.

11) CSO TRIP LIST LABELS
- Replace “trip available #<random id>” with a clear label:
  - **“Jakarta → Purwakarta → Bandung”**, plus **depart time (origin)** and **final arrival**.
  - Also show **origin/destination options** derived from stop list in the OD picker.
  - Use short code **(AB_via_C)** as a secondary badge.

12) HOLD TTL POLICY (selection vs. booking)
- Change HOLD behavior:
  - **Seat selection hold (pre-booking): short TTL = 60s** (configurable). Used to avoid micro-races while filling the passenger form.
  - **Book (pending)** sets **long TTL = 20 minutes** across all legs, tied to the new booking id.
  - **Issue (paid)** consumes the hold and permanently marks seat_inventory as booked.
- Implement on backend:
  - `HoldStore` supports **owner token** and **context** (`{ operatorId, bookingId? }`), with two TTL classes (`short`, `long`).
  - Only the **owner** can extend/release its holds; others see seat as “held by another operator”.

13) HOLD OWNERSHIP & SAME-CSO RE-SELECTION
- The operator who holds a seat must **not** be able to re-hold the same seat redundantly; the UI should show it as “Held by you (00:59)” and allow **Release**.
- Prevent same operator from selecting the same seat twice in frontend state and backend `HoldStore.acquire` (return `{ok:false, reason:'already-held-by-you'}`).
- Ensure **release** is possible manually from:
  - SeatMap (quick release),
  - Pending Bookings page (release pending),
  - On Issue/Cancel flows (automatic).

------------------------------------------------------------
API UPDATES
------------------------------------------------------------
- `POST /api/holds` → body: `{ tripId, seatNo, originSeq, destinationSeq, ttlClass: 'short'|'long', owner: { operatorId, bookingId? } }`
  - Return `{ ok, holdId, expiresAt, ownedByYou: boolean }`; if conflict, return `{ ok:false, code:'held-by-other'|'already-held-by-you' }`.
- `POST /api/bookings/pending` (**Book**) → creates pending booking, converts short holds to long holds (20m), sets `pending_expires_at`.
- `GET /api/bookings/pending` → list pending with countdown, filter by outlet/operator.
- `POST /api/bookings/:id/release` → cancel pending, release holds.
- `POST /api/bookings` (**Issue**) → payment + commit booked seats (existing endpoint), requires existing short/long holds owned by operator.

------------------------------------------------------------
FRONTEND – CSO PAGE
------------------------------------------------------------
- Steps on a **single page**:
  1) Outlet picker (only outlets with `is_outlet=true` – Jakarta, Bandung).
  2) Trip picker (label per item: pattern name/path + depart/arrive).
  3) OD picker (origin/destination based on stop order).
  4) SeatMap (segment-aware availability; tile legend; responsive; no overflow).
  5) Passenger form (per seat).
  6) Actions: **Book** (creates pending, long hold), **Issue** (pay & print), **Release**, navigation buttons (Back/Next).
- Remove duplicate nav buttons; keep one set with clear hierarchy.
- Add toast notifications for all critical actions (hold acquired/released, book created, payment succeeded/failed).

------------------------------------------------------------
TESTS (Vitest + Playwright where FE applicable)
------------------------------------------------------------
- **Hold behavior**:
  - Short hold (60s) on selection; long hold (20m) on Book; same operator cannot double-hold the same seat; another operator cannot acquire while held.
- **Pending bookings**:
  - Create pending; see in `/cso/pending`; continue to Issue; manual Release; auto-expire after TTL (simulate with clock mocks).
- **Scheduling**:
  - Editing stop times recomputes leg durations; re-derive legs idempotent; reordering blocked with existing bookings.
- **Price rules**:
  - Date fields saved as timestamps; invalid strings rejected.
- **UI**:
  - Sidebar toggle visible; master nav highlights one item; master tabs responsive & non-overlapping; CRUD actions visible.
  - Layout form can create a layout; preview renders; dialog reasonable size; buttons enabled when valid.
- **Trip list labels**:
  - CSO list shows path name + times, **not** random IDs.

------------------------------------------------------------
CONFIGURATION
------------------------------------------------------------
- Add settings (env or config table) for:
  - `HOLD_TTL_SHORT_SECONDS` default 60
  - `HOLD_TTL_LONG_SECONDS` default 1200 (20 minutes)
  - `PENDING_BOOKING_AUTO_RELEASE=true`
- Expose these in a simple **Settings** screen (admin stub) and read them server-side.

------------------------------------------------------------
DELIVERABLES
------------------------------------------------------------
- Working code with all fixes/features above.
- Updated `features_checklist.md` with **Backfill from previous agent** and **Bugfix & Enhancements – Sprint 01** items ticked as done, each with verification notes.
- Seed script corrected (outlets flipped; pattern A→C→B; trip 10:00 WIB; legs + seat inventory), and a test `seed.test.ts` asserting outlet truthiness and absence of Purwakarta outlet row.
