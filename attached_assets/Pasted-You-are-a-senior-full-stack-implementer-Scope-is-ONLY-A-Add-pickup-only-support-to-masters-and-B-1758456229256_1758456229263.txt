You are a senior full-stack implementer. Scope is ONLY:
A) Add pickup-only support to masters, and
B) Add a proper scheduling editor (departure/arrival times) in Masters → Trips.

Stack: Node 20 + Express 5 + TS, React + TS (Vite), Drizzle + PostgreSQL. Keep code modular (repo/service/controller). No monolithic storage.ts.

------------------------------------------------------------
DATA MODEL (Drizzle) — migrations & backfill
------------------------------------------------------------
1) pattern_stops: ADD columns
   - boarding_allowed boolean NOT NULL DEFAULT true
   - alighting_allowed boolean NOT NULL DEFAULT true

2) trip_stop_times: ADD nullable override columns
   - boarding_allowed boolean    -- null → inherit from pattern
   - alighting_allowed boolean   -- null → inherit from pattern

Backfill existing rows with true/true (do not break existing data).

Effective flags per trip stop:
effective.boarding_allowed  = coalesce(trip_stop_times.boarding_allowed,  pattern_stops.boarding_allowed,  true)
effective.alighting_allowed = coalesce(trip_stop_times.alighting_allowed, pattern_stops.alighting_allowed, true)

------------------------------------------------------------
BACKEND — endpoints & behavior
------------------------------------------------------------
Masters:
- GET/POST/PUT/DELETE /api/pattern-stops
  • Include boarding_allowed, alighting_allowed in DTOs & validation (Zod).
- GET/POST/PUT/DELETE /api/trips/:id/stop-times
  • Support CRUD for trip_stop_times including optional boarding/alighting overrides.
  • Guard: if trip has bookings, forbid reordering stop_sequence (time edits allowed).

Scheduling:
- GET  /api/trips/:id/stop-times → return ordered stops with arrive_at, depart_at, dwell_seconds, and effective boarding/alighting flags.
- POST /api/trips/:id/stop-times/bulk-upsert
  • Body: array of { stop_id, stop_sequence, arrive_at?, depart_at?, dwell_seconds?, boarding_allowed?, alighting_allowed? }
  • Server computes and stores fields; validates monotonic time order (each arrive/depart must be ≥ previous depart + dwell).
- POST /api/trips/:id/derive-legs → recompute trip_legs (idempotent).
- POST /api/trips/:id/precompute-seat-inventory → seats × legs (idempotent).

Booking validation (already existing endpoints):
- Enforce OD rules using effective flags:
  • origin_seq must be boardable, destination_seq must be alightable.
  • On violation, HTTP 400 with { code: "boarding-not-allowed" | "alighting-not-allowed" }.

------------------------------------------------------------
FRONTEND — Masters UI changes
------------------------------------------------------------
Pattern Stops (Masters → Trip Patterns → Pattern Stops):
- Add two toggles/checkboxes per row: “Allow Pickup (Boarding)” and “Allow Drop (Alighting)”.
- Defaults: both ON. Persist to /api/pattern-stops.
- Responsive table with clear labels and tooltips.

Trips → NEW “Scheduling” tab (per Trip):
- A single page editor for the selected Trip:
  • Shows ordered stops (read from /api/trips/:id/stop-times).
  • Editable fields per stop:
    - arrive_at (datetime-local, optional for first stop)
    - depart_at (datetime-local, required for first stop; optional for last stop)
    - dwell_seconds (number; default 0)
    - (optional overrides) boarding_allowed, alighting_allowed (inherit when blank)
  • Inline computed read-only fields:
    - leg duration between consecutive stops (e.g., A→C, C→B)
    - final arrival time preview
  • Buttons:
    - “Save Schedule” → POST /bulk-upsert
    - “Derive Legs” → POST /api/trips/:id/derive-legs
    - “Precompute Seat Inventory” → POST /api/trips/:id/precompute-seat-inventory
  • Validation UX:
    - Enforce chronological order (no negative durations).
    - If trip has bookings, disable drag-reorder of rows; allow editing times only (show warning banner).

OD Picker (CSO page) — small change to use effective flags:
- Origin dropdown lists only boardable stops.
- Destination dropdown lists only later stops that are alightable.
- If a stop is disabled as destination, show tooltip “No drop at this stop”.

Trip List labels (minor polish):
- Display route path “Jakarta → Purwakarta → Bandung”, origin depart time, and final arrival (do not show random IDs).

------------------------------------------------------------
SEED/DEMO (for pickup-only verification)
------------------------------------------------------------
- Pattern AB_via_C: A(1), C(2), B(3).
- pattern_stops flags:
  • A: boarding_allowed=true,  alighting_allowed=true
  • C: boarding_allowed=true,  alighting_allowed=false   (pickup-only)
  • B: boarding_allowed=true,  alighting_allowed=true
- Example trip times (WIB +07:00):
  • A depart 12:00
  • C arrive 12:55, depart 13:00
  • B arrive 14:00
- Re-derive legs & precompute seat inventory.

------------------------------------------------------------
TESTS (Vitest + Supertest; FE smoke acceptable)
------------------------------------------------------------
- Data model:
  • Migrations add flags; backfilled true/true.
- Scheduling:
  • bulk-upsert with valid chronological times passes, derive-legs idempotent.
  • Reordering stop_sequence blocked when bookings exist.
- Pickup-only:
  • Booking A→C fails with 400 { code: "alighting-not-allowed" }.
  • Booking C→B succeeds (C boardable, B alightable).
- API:
  • /api/trips/:id/stop-times returns effective flags (pattern or override).
- UI:
  • Pattern Stops shows toggles and persists.
  • Scheduling tab edits times and shows computed leg durations.
  • OD Picker hides disallowed options and shows tooltip.

------------------------------------------------------------
ACCEPTANCE CRITERIA
------------------------------------------------------------
- Masters now include pickup/drop flags in Pattern Stops and optional overrides in Trip Stop Times.
- There is a clear Scheduling editor under Masters → Trips to set depart/arrive/dwell, see leg durations, and (re)generate legs + seat inventory.
- Booking validation enforces pickup-only rules.
- Seed/demo reflects pickup-only at Purwakarta and scheduled times A12:00 → C13:00 → B14:00.
