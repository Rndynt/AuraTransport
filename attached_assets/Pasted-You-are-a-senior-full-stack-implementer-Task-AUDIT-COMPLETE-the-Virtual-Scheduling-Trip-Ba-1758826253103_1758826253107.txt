You are a senior full-stack implementer. **Task:** AUDIT & COMPLETE the “Virtual Scheduling (Trip Bases)” feature and **implement WebSocket realtime** as specified. Source of truth spec is in:
`attached_assets/Pasted-You-are-a-senior-full-stack-implementer-Finish-the-Virtual-Scheduling-feature-by-adding-Master-Tr-1758818078462_1758818078462.txt`
Fix gaps end-to-end. Stack: Node 20 + Express 5 + TypeScript, React + TS (Vite), Drizzle + PostgreSQL. Keep code modular by feature.

===============================================================================
GOALS
===============================================================================
1) **Audit** implemented vs. spec. Mark ✅/❌ per item (put the report in `features_checklist.md`).
2) **Master Trip Bases CRUD**: make it fully working with validation (Create currently failing).
3) **Seed data** for Trip Bases so CSO sees virtual schedules immediately.
4) **CSO “Closed” visibility**: trips with `status='closed'` must be visible (badge) but non-bookable.
5) Verify & complete: union `available-trips` (REAL + VIRTUAL with `isVirtual`), `materialize-trip` (idempotent), `close-trip` (releases holds & blocks booking/issue), seatmap lock, dedup logic, pickup-only filter, base validations.
6) **Implement WebSocket realtime events** (see REALTIME section) and update FE to react to them. Provide polling fallback.

===============================================================================
DATA MODEL (confirm/migrate)
===============================================================================
- Ensure table **trip_bases** with fields:
  - id (uuid pk), patternId (fk trip_patterns), code (text, optional unique), name (text),
  - active (bool), timezone (text, default 'Asia/Jakarta'),
  - mon..sun (bool toggles),
  - validFrom (date), validTo (date),
  - defaultLayoutId (fk layouts), defaultVehicleId (fk vehicles), capacity (int, optional),
  - channelFlags (jsonb) default {"CSO":true,"WEB":false,"APP":false,"OTA":false},
  - defaultStopTimes (jsonb) — HH:MM:SS time-only per stopSequence,
  - createdAt/updatedAt.
- Ensure **trips** has `baseId uuid NULL references trip_bases(id)` and optional `originDepartHHMM char(5)`.
- Partial unique index: `UNIQUE (base_id, service_date) WHERE base_id IS NOT NULL`.
- Migrations run cleanly; safe defaults/backfills applied.

===============================================================================
BACKEND
===============================================================================
A) Trip Bases CRUD API
- Endpoints:
  - `GET /api/trip-bases` (filters: active, patternId, date overlap),
  - `GET /api/trip-bases/:id`,
  - `POST /api/trip-bases`, `PUT /api/trip-bases/:id`,
  - `DELETE /api/trip-bases/:id` (block if future trips exist, or allow with clear warning).
- Validation:
  - `defaultStopTimes` monotonic: origin requires `departAt`, last stop requires `arriveAt`, non-decreasing times.
  - Format HH:mm:ss (strings). **Do not** parse to dates here.
  - DOW toggles and date ranges sanity checks. Return 4xx with clear messages.

B) Available Trips (union REAL + VIRTUAL)
- `GET /api/cso/available-trips?date=YYYY-MM-DD&outletId=<uuid>` returns array of items:
  - REAL: from `trips` of that date, `isVirtual=false`, include `status`, compute `departAtAtOutlet` / `finalArrivalAt` from `trip_stop_times`.
  - VIRTUAL: eligible `trip_bases` for that date (active + DOW + range), `isVirtual=true`, compute times from `defaultStopTimes` using base.timezone.
  - Dedup: hide VIRTUAL if a REAL exists for `(baseId, serviceDate)`.
  - Respect boarding filter at outlet stop (effective flags).
  - Include fields: {tripId?, baseId?, isVirtual, patternCode, patternPath, vehicle?, capacity?, status, departAtAtOutlet, finalArrivalAt, stopCount}

C) Materialize (idempotent & race-safe)
- `POST /api/cso/materialize-trip` `{ baseId, serviceDate }`:
  - Validate eligibility for the date.
  - Try select existing REAL by `(base_id, service_date)`; return if exists.
  - Else transaction:
    - Insert `trips` (status 'scheduled', baseId, patternId, defaults from base).
    - Build `trip_stop_times` from `defaultStopTimes` + serviceDate + tz; inherit pickup/drop from pattern_stops.
    - Derive `trip_legs`; precompute `seat_inventory`.
  - Handle unique violation by re-selecting existing trip and returning it.

D) Close Trip (operational)
- `POST /api/trips/:id/close` (SPV only):
  - Set `status='closed'`.
  - Release/expire all holds for this `tripId`.
  - Emit realtime `TRIP_STATUS_CHANGED` (and `TRIP_CANCELED` alias if you keep it) — see REALTIME.
  - Booking/Issue/Payment endpoints must reject with `409` `{ code: 'trip-closed' }`.

E) Logging (development)
- Log composition counts: REAL/VIRTUAL, dedup result.
- Log materialize attempts/success/unique-violation.
- Log close-trip (holds released count).
- Wrap with DEBUG guard.

===============================================================================
FRONTEND
===============================================================================
A) Masters → Trip Bases (CRUD UI)
- List table: [Name, Pattern, DOW badges (S M T W T F S), ValidFrom–ValidTo, Origin HH:MM, Active, Actions].
- Create/Edit in **BaseDialog**:
  - Fields: Pattern, Name, Code (opt), Active, DOW toggles, ValidFrom/To, Default Layout/Vehicle (opt), Capacity (opt), Channel Flags, Default Stop Times editor (rows derived from `pattern_stops`).
  - Time inputs HH:mm:ss; inline validation; disable Save when invalid; show server errors clearly.
- Delete with confirmation; warn/block if there are future trips.

B) CSO Available Trips
- Render REAL and VIRTUAL:
  - Badge **Virtual** for `isVirtual=true`.
  - Badge **Closed** (danger) for `status='closed'` — card visible but primary action disabled with tooltip “Closed — not bookable”.
- Interactions:
  - VIRTUAL → on Select: call `POST /materialize-trip`, then navigate to seatmap using returned `tripId`.
  - REAL (scheduled) → go to seatmap.
  - REAL (closed) → disabled actions; show badge.
- Multiple trip_bases with same time (extra slots) must render as distinct items; do not dedup by time.

C) Seatmap / Booking
- If realtime `TRIP_STATUS_CHANGED` to `closed` (or polling detects it):
  - Show banner “Trip closed by supervisor”.
  - Disable seat selection / Book / Issue; gracefully reject with toast explaining closure.
  - Optionally auto-release the operator’s own holds on that trip.

===============================================================================
REALTIME (WebSocket/SSE) — IMPLEMENT & WIRE UP
===============================================================================
Implement server-side publish + client-side subscribe. Use Socket.IO or SSE.

**Server events to emit:**
1) `TRIP_STATUS_CHANGED` `{ tripId, status }`
2) `TRIP_CANCELED` `{ tripId }`  // optional alias of status change (for legacy)
3) `HOLDS_RELEASED` `{ tripId, seatNos?: string[] }`  // optional detail after closing
4) `TRIP_MATERIALIZED` `{ baseId, serviceDate, tripId }`  // so CSO lists can flip Virtual → Real without manual refresh
5) `INVENTORY_UPDATED` `{ tripId, seatNo: string, legIndexes?: number[] }`  // optional granular seat updates

**Front-end reactions:**
- On `TRIP_MATERIALIZED`:
  - If CSO list is open for that date/outlet, update the corresponding card from Virtual → Real (or just refetch).
- On `TRIP_STATUS_CHANGED` (`closed`):
  - If seatmap open for `tripId`, lock UI, show banner, disable actions.
  - In the list, show the **Closed** badge and disable selection.
- On `HOLDS_RELEASED`:
  - Optionally refresh seat holds state/seat colors.
- On `INVENTORY_UPDATED`:
  - Optimistically update individual seat states (optional).
**Fallback**: If WS is not available, implement polling:
- Seatmap: 10–15s heartbeat of trip status/version.
- CSO list: 30–60s while page open.

===============================================================================
SEED DATA (make the feature visible now)
===============================================================================
- Stops: JKT (Jakarta), PWK (Purwakarta, pickup-only), BDG (Bandung).
- Outlets: Jakarta Outlet ↔ JKT, Purwakarta Outlet ↔ PWK.
- Layouts: Standard 12-seat, Standard 8-seat.
- Vehicles: BUS-A (12-seat), BUS-B (8-seat).
- Pattern: `AB_via_C` with `pattern_stops`:
  - JKT: boardingAllowed=true, alightingAllowed=false
  - PWK: boardingAllowed=true, alightingAllowed=false (pickup-only)
  - BDG: boardingAllowed=false, alightingAllowed=true
- Trip Bases (all days active, validFrom=today, validTo=NULL, timezone Asia/Jakarta):
  - Base-1: “AB_via_C 10:00 Slot-1” (defaultLayout=12-seat, defaultVehicle=BUS-A)
  - Base-2: “AB_via_C 10:00 Slot-2” (same time; defaultLayout=8-seat, defaultVehicle=BUS-B)
  - Base-3: “AB_via_C 13:00 Slot-1”
  - `defaultStopTimes`:
    - For 10:00 bases:
      - seq1 JKT depart 10:00:00
      - seq2 PWK arrive 10:55:00, depart 11:00:00
      - seq3 BDG arrive 12:00:00
    - For 13:00 base:
      - seq1 JKT depart 13:00:00
      - seq2 PWK arrive 13:55:00, depart 14:00:00
      - seq3 BDG arrive 15:00:00
- Price Rule: scope `pattern` with basePricePerLeg (IDR).
- Seeder must be **idempotent** (upsert by codes).

===============================================================================
QA / MANUAL TESTS
===============================================================================
1) CSO @ Jakarta Outlet (today): see 3 items — Virtual 10:00 (Slot-1), Virtual 10:00 (Slot-2), Virtual 13:00 — with correct `departAtAtOutlet` (10:00 or 13:00) and pattern path.
2) Multi-CSO: two clients select Virtual 10:00 Slot-1 simultaneously → exactly one `trip` created (unique base/day); both navigate to the same `tripId`. List shows Slot-1 as REAL; Slot-2 remains Virtual.
3) Extra slot: materialize Slot-2 → now two REAL trips at 10:00 (different baseId).
4) Close Trip: SPV closes one trip → list shows **Closed** badge (visible, disabled actions). Seatmap locks with banner; Booking/Issue return `409 code=trip-closed`. Realtime event received by all clients.
5) PWK outlet: `departAtAtOutlet` for 10:00 base shows 11:00 (pickup-only respected).
6) Dedup: when a REAL trip exists for `(baseId, date)`, its VIRTUAL counterpart is hidden.
7) Realtime `TRIP_MATERIALIZED` flips Virtual → Real in the CSO list without manual refresh.

===============================================================================
AUDIT & GAP-FIX (DO NOW)
===============================================================================
- Compare current code to the spec and this task. For each sub-item mark:
  - ✅ implemented & tested, 
  - ❌ missing/buggy (fix now), 
  - 🔁 partially implemented (finish).
- Common gaps to check/fix:
  - Master Trip Bases Create fails → fix server validations/DTOs.
  - Seeder missing → add now.
  - Closed not visible in CSO → ensure `/available-trips` includes closed status and FE renders badge disabling actions.
  - `isVirtual` flag and dedup logic in `/available-trips`.
  - Idempotent materialize with unique index (and race handler).
  - Realtime events emitted on materialize/close; FE subscribes and reacts; or polling fallback wired.
  - BaseDialog used for Trip Bases forms (consistent header/scrollable body/sticky footer).

===============================================================================
UPDATE CHECKLIST (append to features_checklist.md)
===============================================================================
**Virtual Scheduling (Trip Bases) — Audit Round**
- Schema & Migrations
  - [ ] trip_bases table created with required fields
  - [ ] trips.baseId + partial unique index
- Backend
  - [ ] Trip Bases CRUD + validations (POST/PUT/DELETE/GET)
  - [ ] /api/cso/available-trips union + isVirtual + dedup + outlet boarding filter
  - [ ] /api/cso/materialize-trip idempotent + legs + inventory
  - [ ] /api/trips/:id/close sets closed, releases holds
  - [ ] Realtime emit: TRIP_MATERIALIZED, TRIP_STATUS_CHANGED, TRIP_CANCELED, HOLDS_RELEASED, INVENTORY_UPDATED
- Frontend
  - [ ] Masters → Trip Bases (List + Create/Edit/Delete with BaseDialog)
  - [ ] CSO list: Virtual & Closed badges, disabled actions for Closed
  - [ ] Materialize flow from Virtual → navigate to Real seatmap
  - [ ] Seatmap locks on closed (realtime/polling)
- Seeder
  - [ ] JKT/PWK/BDG stops + outlets
  - [ ] Layouts 12/8, Vehicles BUS-A/B
  - [ ] Pattern AB_via_C (pickup-only at PWK)
  - [ ] Trip Bases (10:00 Slot-1, 10:00 Slot-2, 13:00 Slot-1)
  - [ ] Price rule (pattern scope)
- Tests / Verification
  - [ ] Manual tests executed (list in README/DEVNOTES)
  - [ ] (optional) API tests for materialize concurrency & close-trip

===============================================================================
DELIVERABLES
===============================================================================
- Working Master Trip Bases (CRUD) + validations.
- Seeder populating trip bases so CSO sees virtual items on first run.
- `/available-trips` union with `isVirtual`, closed badge visible & non-bookable.
- `materialize-trip` idempotent & race-safe; `close-trip` releases holds & locks UI.
- WebSocket realtime implemented with required events and FE reactions, or polling fallback.
- Updated `features_checklist.md` with audit status and verification notes.
