You are a senior full-stack implementer. Build a production-grade MVP for a multi-stop bus/travel ticketing system with NO authentication (for now). Goal: validate the data model and the CSO one-page booking flow. Use Node 20 + Express 5 + TypeScript for the API and React + TypeScript (Vite) for the UI. Keep architecture clean and modular. Model multi-stop routes with segment/leg-based seat inventory. Design for DB-per-tenant conceptually, but run dev with a single sample tenant DB.

NON-NEGOTIABLE RULES
- After a trip is published and has bookings, do NOT allow changing the stop_sequence (order) of its stops. Time changes are allowed; changing order must require creating a new trip.
- Keep code modular by feature (repo/service/controller). Do NOT dump logic into a single storage.ts.
- Maintain a living features_checklist.md at repo root. Every time you complete and verify a feature, tick it and append notes (what was built, how verified, demo URL). The agent MUST update this file automatically as features are finished.

TECH & LIBS
- Backend: Node 20, Express 5, TypeScript (strict), Drizzle ORM + PostgreSQL, Zod (DTO validation), Pino (logging), Vitest + Supertest, tsx for dev.
- Frontend: React + TypeScript (Vite), React Router, React Query, Zustand (light global state), minimal headless UI components.
- Optional: docker-compose for Postgres; an in-memory HOLD store with a Redis-ready adapter behind a flag (default off).

REPOSITORY LAYOUT (monorepo-simple)
/
  mvp-multistop/
    backend/
      src/
        app.ts
        server.ts
        config/
          env.ts
        core/
          db.ts            # drizzle client + pool
          logger.ts
          errors.ts
        middleware/
          requestId.ts
          errorHandler.ts
        modules/
          stops/
            stops.schema.ts
            stops.dto.ts
            stops.repo.ts
            stops.service.ts
            stops.controller.ts
            stops.routes.ts
          outlets/
            outlets.schema.ts
            outlets.dto.ts
            outlets.repo.ts
            outlets.service.ts
            outlets.controller.ts
            outlets.routes.ts
          vehicles/
            vehicles.schema.ts
            vehicles.dto.ts
            vehicles.repo.ts
            vehicles.service.ts
            vehicles.controller.ts
            vehicles.routes.ts
          layouts/
            layouts.schema.ts
            layouts.dto.ts
            layouts.repo.ts
            layouts.service.ts
            layouts.controller.ts
            layouts.routes.ts
          tripPatterns/
            tripPatterns.schema.ts
            tripPatterns.dto.ts
            tripPatterns.repo.ts
            tripPatterns.service.ts
            tripPatterns.controller.ts
            tripPatterns.routes.ts
          patternStops/
            patternStops.schema.ts
            patternStops.dto.ts
            patternStops.repo.ts
            patternStops.service.ts
            patternStops.controller.ts
            patternStops.routes.ts
          trips/
            trips.schema.ts
            trips.dto.ts
            trips.repo.ts
            trips.service.ts
            trips.controller.ts
            trips.routes.ts
          tripStopTimes/
            tripStopTimes.schema.ts
            tripStopTimes.dto.ts
            tripStopTimes.repo.ts
            tripStopTimes.service.ts
            tripStopTimes.controller.ts
            tripStopTimes.routes.ts
          tripLegs/
            tripLegs.schema.ts
            tripLegs.repo.ts
            tripLegs.service.ts
            tripLegs.controller.ts
            tripLegs.routes.ts
          seatInventory/
            seatInventory.schema.ts
            seatInventory.repo.ts
            seatInventory.service.ts
          priceRules/
            priceRules.schema.ts
            priceRules.dto.ts
            priceRules.repo.ts
            priceRules.service.ts
            priceRules.controller.ts
            priceRules.routes.ts
          bookings/
            bookings.schema.ts
            bookings.dto.ts
            bookings.repo.ts
            bookings.service.ts
            bookings.controller.ts
            bookings.routes.ts
          payments/
            payments.schema.ts
            payments.dto.ts
            payments.repo.ts
            payments.service.ts
            payments.controller.ts
            payments.routes.ts
          printing/
            print.service.ts   # build printable payload (no real printer)
        shared/
          types.ts
          utils.ts
        test/
          integration/
            availability.test.ts
            bookings.test.ts
      drizzle.config.ts
      package.json
      tsconfig.json
      README.md
    frontend/
      src/
        app/
          routes.tsx
          providers.tsx
        shared/
          api.ts
          types.ts
          hooks/
        features/
          masters/
            StopsPage.tsx
            OutletsPage.tsx
            VehiclesPage.tsx
            LayoutsPage.tsx
            TripPatternsPage.tsx
            TripsPage.tsx
            PriceRulesPage.tsx
          cso/
            CsoPage.tsx
            components/
              TripPicker.tsx
              OdPicker.tsx
              SeatMap.tsx
              PassengerForm.tsx
              PaymentPanel.tsx
              PrintPreview.tsx
            hooks/
              useSeatHold.ts
              useBookingFlow.ts
      index.html
      vite.config.ts
      package.json
      tsconfig.json
      README.md
    package.json
    features_checklist.md
    README.md

DATA MODEL (Drizzle schemas) — create EXACTLY these tables/fields
1) stops
- id uuid pk
- code text unique
- name text
- city text nullable
- lat numeric(9,6) nullable
- lng numeric(9,6) nullable
- is_outlet boolean default false
- created_at timestamptz default now

2) outlets
- id uuid pk
- stop_id uuid fk→stops.id unique
- name text
- address text nullable
- phone text nullable
- printer_profile_id text nullable
- created_at timestamptz

3) vehicles
- id uuid pk
- code text unique
- plate text unique
- layout_id uuid fk→layouts.id
- capacity int
- notes text nullable
- created_at timestamptz

4) layouts
- id uuid pk
- name text
- rows int
- cols int
- seat_map jsonb   (array of {seat_no,row,col,class?,disabled?})
- created_at timestamptz

5) trip_patterns
- id uuid pk
- code text unique          (e.g., AB_via_C)
- name text
- vehicle_class text nullable
- default_layout_id uuid fk→layouts.id nullable
- active boolean default true
- tags text[] default '{}'
- created_at timestamptz

6) pattern_stops
- id uuid pk
- pattern_id uuid fk→trip_patterns.id
- stop_id uuid fk→stops.id
- stop_sequence int          UNIQUE(pattern_id, stop_sequence)
- dwell_seconds int default 0
- created_at timestamptz
Indexes: (pattern_id, stop_sequence), (pattern_id, stop_id)

7) trips
- id uuid pk
- pattern_id uuid fk→trip_patterns.id
- service_date date
- vehicle_id uuid fk→vehicles.id
- layout_id uuid fk→layouts.id nullable
- capacity int
- status enum(scheduled,canceled,closed) default 'scheduled'
- channel_flags jsonb        ({CSO:true, WEB:false, APP:false, OTA:false})
- created_at timestamptz
Indexes: (pattern_id, service_date), (status, service_date)

8) trip_stop_times
- id uuid pk
- trip_id uuid fk→trips.id
- stop_id uuid fk→stops.id
- stop_sequence int          UNIQUE(trip_id, stop_sequence)
- arrive_at timestamptz nullable
- depart_at timestamptz nullable
- dwell_seconds int default 0
Indexes: (trip_id, stop_sequence)

9) trip_legs
- id uuid pk
- trip_id uuid fk→trips.id
- leg_index int              (1..N-1) UNIQUE(trip_id, leg_index)
- from_stop_id uuid fk→stops.id
- to_stop_id uuid fk→stops.id
- depart_at timestamptz
- arrive_at timestamptz
- duration_min int
Indexes: (trip_id, leg_index), (trip_id, from_stop_id, to_stop_id)

10) seat_inventory   (precomputed on trip publish)
- id uuid pk
- trip_id uuid fk→trips.id
- seat_no text
- leg_index int
- booked boolean default false
- hold_ref text nullable
Unique: (trip_id, seat_no, leg_index)
Indexes: (trip_id, leg_index, booked), (trip_id, seat_no)

11) price_rules
- id uuid pk
- scope enum(pattern,trip,leg,time)
- pattern_id uuid nullable
- trip_id uuid nullable
- leg_index int nullable
- rule jsonb                 (base per leg, caps, discounts, peak %, promo)
- valid_from timestamptz nullable
- valid_to timestamptz nullable
- priority int default 0
Indexes: (scope, pattern_id), (scope, trip_id), (valid_from, valid_to)

12) bookings
- id uuid pk
- trip_id uuid fk→trips.id
- origin_stop_id uuid fk→stops.id
- destination_stop_id uuid fk→stops.id
- origin_seq int
- destination_seq int
- outlet_id uuid fk→outlets.id nullable
- channel enum(CSO,WEB,APP,OTA) default 'CSO'
- status enum(pending,paid,canceled,refunded) default 'pending'
- total_amount numeric(12,2)
- currency text default 'IDR'
- created_by text nullable
- created_at timestamptz
Indexes: (trip_id), (status, trip_id), (outlet_id, created_at)

13) passengers
- id uuid pk
- booking_id uuid fk→bookings.id
- full_name text
- phone text nullable
- id_number text nullable
- seat_no text               (same seat across all legs for this OD)
- fare_amount numeric(12,2)
- fare_breakdown jsonb nullable
Indexes: (booking_id)

14) payments
- id uuid pk
- booking_id uuid fk→bookings.id
- method enum(cash,qr,ewallet,bank)
- amount numeric(12,2)
- status enum(pending,success,failed) default 'success'
- provider_ref text nullable
- paid_at timestamptz
Indexes: (booking_id, status)

15) print_jobs
- id uuid pk
- booking_id uuid fk→bookings.id
- status enum(queued,sent,failed) default 'queued'
- attempts int default 0
- last_error text nullable
- created_at timestamptz

BACKEND BEHAVIOR
- Seed demo data:
  - Stops: A (Jakarta), C (Purwakarta), B (Bandung).
  - Outlets: map A and C as outlets.
  - Layout: 12 seats (simple grid).
  - Pattern: AB_via_C with sequence A(1), C(2), B(3).
  - Trip: today at 10:00; stop times: A depart 10:00, C arrive 10:55/depart 11:00, B arrive 12:00.
  - Derive trip_legs then precompute seat_inventory (seats × legs).
- Implement service-level guard: if a trip has any booking, reject mutations that reorder stop_sequence (return clear error).
- Seat HOLD interface:
  - InMemoryHoldStore (default): atomic multi-key acquire for all legs in a range, TTL 120s.
  - RedisHoldStore skeleton behind USE_REDIS=false flag (not required to run).
- Pricing:
  - pricing.service.ts exposes quoteFare(tripId, originSeq, destinationSeq, seatClass?).
  - Default: sum per-leg base, then apply simple rules from price_rules (fixed or %). Keep minimal.

API ENDPOINTS
- Masters CRUD: stops, outlets, vehicles, layouts, tripPatterns, patternStops, trips, tripStopTimes, priceRules.
- Trip derivations:
  - POST /api/trips/:id/derive-legs
  - POST /api/trips/:id/precompute-seat-inventory
- CSO:
  - GET  /api/trips?date=YYYY-MM-DD
  - GET  /api/trips/:id/stop-times
  - GET  /api/trips/:id/seatmap?originSeq=1&destinationSeq=3   (returns layout + per-seat availability for OD; available iff all legs in range are free)
  - POST /api/holds   body: { tripId, seatNo, originSeq, destinationSeq, ttlSeconds? }   (atomically hold all legs in range for that seat)
  - POST /api/bookings   header: Idempotency-Key
        body fields:
          tripId, outletId, originStopId, destinationStopId, originSeq, destinationSeq,
          passengers: array of { fullName, phone?, idNumber?, seatNo },
          payment: { method, amount }
        flow:
          1) validate OD; derive legs range;
          2) ensure all seat-legs are unbooked and currently held by this request;
          3) DB transaction: mark seat_inventory.booked=true for each seat-leg; insert booking + passengers + payment (status 'paid' for MVP);
          4) enqueue print_jobs (queued); return printable payload.

TESTS (Vitest + Supertest)
- availability.test.ts: booking A→B seat 4 marks leg1 & leg2 booked; subsequent A→C or C→B seat 4 unavailable.
- bookings.test.ts: Idempotency-Key enforced; guard prevents stop order change when bookings exist.

FRONTEND (Vite + React + TS)
- Routes:
  - /masters   (tabs/cards to each master CRUD)
  - /cso       (single page booking/issue)
- Masters UI:
  - Simple tables/forms. For pattern stops, support drag reorder or explicit sequence. In trips editor, buttons: Derive legs, Precompute seat inventory.
- CSO one-page flow:
  1) Outlet Picker (persist locally).
  2) Trip Picker (date filter + list).
  3) OD Picker (origin/destination from ordered stops; resolve originSeq/destinationSeq).
  4) SeatMap (grid from layouts.seat_map) showing segment-aware availability for OD; selecting a seat calls POST /api/holds and shows TTL badge.
  5) Passenger Form (per selected seat).
  6) Payment Panel (cash/qr/ewallet/bank; mock).
  7) Issue & Print Preview (render returned printable JSON/HTML).
- State:
  - useSeatHold: manage holds (create/release, TTL refresh, availability refetch).
  - useBookingFlow: orchestrate step data within one page.
- Keyboard UX: arrow navigation on seat grid; Enter to select; helpful shortcuts (e.g., Alt+F find route, Alt+P pay).

SCRIPTS
- Backend package.json:
  - dev = tsx src/server.ts
  - db:push = run Drizzle migrations
  - seed = seed demo data, derive legs, precompute seat inventory
  - test = vitest
- Frontend package.json:
  - dev = vite
  - build = vite build
- Root optional: concurrently to run both.

README & DIAGRAMS
- Backend README: quickstart, env vars, diagram (multi-stop → legs → seat_inventory), invariant: “no stop order change after bookings”, how to run seed.
- Frontend README: pages and how to use CSO page end-to-end.

ACCEPTANCE CRITERIA (the agent MUST update features_checklist.md as items are completed)
- [ ] Drizzle schemas match exactly all tables/fields above.
- [ ] Seed demo: A-C-B pattern, one trip today 10:00, 12 seats, derived legs, precomputed seat inventory.
- [ ] Masters CRUD working (stops/outlets/vehicles/layouts/tripPatterns/patternStops/trips/tripStopTimes/priceRules).
- [ ] Trip legs derivation endpoint works; seat inventory precompute works.
- [ ] CSO page completes Outlet → Trip → OD → Seat → Passenger → Payment → Issue (Print Preview) on a single screen.
- [ ] Availability is segment-aware; booking A→B seat 4 blocks leg1 & leg2; A→C or C→B seat 4 becomes unavailable.
- [ ] HOLD TTL (120s) prevents race; booking requires held seats.
- [ ] Guard blocks stop order changes on trips with existing bookings.
- [ ] Code modular by feature; no monolithic storage file.
- [ ] features_checklist.md updated with checks and notes immediately after each feature is implemented and verified.
